import pandas as pd
import numpy as np
from sklearn.preprocessing import RobustScaler, PolynomialFeatures
from sklearn.metrics import mean_squared_error
from scipy.stats import pearsonr
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'Hb_PPG.csv'  # Update this to your file path
dataset = pd.read_csv(file_path)

# Extracting the features (red, infrared signals, age) and labels (hemoglobin values)
num_subjects = 68
X = []
y = []

for i in range(num_subjects):
    start_idx = i * 12
    end_idx = start_idx + 12
    red_signals = dataset['Red (a.u)'][start_idx:end_idx].values
    ir_signals = dataset['Infra Red (a.u)'][start_idx:end_idx].values
    age = dataset['Age (year)'][start_idx]
    hemoglobin = dataset['Hemoglobin (g/dL)'][start_idx]
    
    features = np.concatenate((red_signals, ir_signals, [age]))
    X.append(features)
    y.append(hemoglobin)

X = np.array(X)
y = np.array(y)

# Polynomial feature expansion
poly = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly.fit_transform(X)

# Split data based on subjects
subject_indices = np.arange(num_subjects)
train_indices, test_indices = train_test_split(subject_indices, test_size=10, random_state=42)

X_train = X_poly[train_indices]
y_train = y[train_indices]
X_test = X_poly[test_indices]
y_test = y[test_indices]

# Further split training data into training and validation sets
train_indices, val_indices = train_test_split(np.arange(len(X_train)), test_size=0.2, random_state=42)

X_val = X_train[val_indices]
y_val = y_train[val_indices]
X_train = X_train[train_indices]
y_train = y_train[train_indices]

# Scaling the data using RobustScaler
scaler = RobustScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

# Convert to PyTorch tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
X_val_tensor = torch.tensor(X_val, dtype=torch.float32)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32)
y_val_tensor = torch.tensor(y_val, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32)

# Create DataLoader
batch_size = 16
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
val_dataset = TensorDataset(X_val_tensor, y_val_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

class HMLCNNModel(nn.Module):
    def __init__(self, dropout_rate=0.3):
        super(HMLCNNCNNModel, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=1, out_channels=4, kernel_size=5, padding=2)
        self.bn1 = nn.BatchNorm1d(4)
        self.conv2 = nn.Conv1d(in_channels=4, out_channels=8, kernel_size=5, padding=2)
        self.bn2 = nn.BatchNorm1d(8)
        self.conv3 = nn.Conv1d(in_channels=8, out_channels=16, kernel_size=5, padding=2)
        self.bn3 = nn.BatchNorm1d(16)
        self.conv4 = nn.Conv1d(in_channels=16, out_channels=32, kernel_size=5, padding=2)
        self.bn4 = nn.BatchNorm1d(32)
        self.pool = nn.MaxPool1d(kernel_size=2, stride=2)
        self.dropout = nn.Dropout(dropout_rate)
        
        self.fc1 = nn.Linear(self._get_conv_output_size(), 100)
        self.fc2 = nn.Linear(100, 50)
        self.fc3 = nn.Linear(50, 1)

    def _get_conv_output_size(self):
        input = torch.zeros(1, 1, X_train.shape[1])
        x = torch.relu(self.bn1(self.conv1(dummy_input)))
        x = self.pool(x)
        x = torch.relu(self.bn2(self.conv2(x)))
        x = self.pool(x)
        x = torch.relu(self.bn3(self.conv3(x)))
        x = self.pool(x)
        x = torch.relu(self.bn4(self.conv4(x)))
        x = self.pool(x)
        return x.numel()

    def forward(self, x):
        x = x.view(x.size(0), 1, -1)  # Change shape to (batch_size, channels, timesteps)
        x = torch.relu(self.bn1(self.conv1(x)))
        x = self.pool(x)
        x = torch.relu(self.bn2(self.conv2(x)))
        x = self.pool(x)
        x = torch.relu(self.bn3(self.conv3(x)))
        x = self.pool(x)
        x = torch.relu(self.bn4(self.conv4(x)))
        x = self.pool(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.dropout(torch.relu(self.fc1(x)))
        x = self.dropout(torch.relu(self.fc2(x)))
        x = self.fc3(x)
        return x

model = HMLCNNCNNModel(dropout_rate=0.3)

# Loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.0005)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5)

# Early stopping parameters
early_stopping_patience = 10
best_loss = float('inf')
patience_counter = 0

# Training the model
num_epochs = 100
train_losses = []
val_losses = []
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs.squeeze(), labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    epoch_loss = running_loss / len(train_loader)
    train_losses.append(epoch_loss)
    print(f'Epoch {epoch + 1}, Loss: {epoch_loss}')
    
    # Validation
    model.eval()
    val_loss = 0.0
    with torch.no_grad():
        for inputs, labels in val_loader:
            outputs = model(inputs)
            loss = criterion(outputs.squeeze(), labels)
            val_loss += loss.item()
    val_loss /= len(val_loader)
    val_losses.append(val_loss)
    print(f'Epoch {epoch + 1}, Validation Loss: {val_loss}')
    
    scheduler.step(val_loss)
    
    if val_loss < best_loss:
        best_loss = val_loss
        patience_counter = 0
        # Save the best model
        torch.save(model.state_dict(), 'best_model.pth')
    else:
        patience_counter += 1
    
    if patience_counter >= early_stopping_patience:
        print("Early stopping")
        break

# Load the best model
model.load_state_dict(torch.load('best_model.pth'))

# Evaluating the model
model.eval()
test_loss = 0.0
y_pred = []
with torch.no_grad():
    for inputs, labels in test_loader:
        outputs = model(inputs)
        loss = criterion(outputs.squeeze(), labels)
        test_loss += loss.item()
        y_pred.extend(outputs.squeeze().tolist())
print(f'Test Loss: {test_loss / len(test_loader)}')

# Calculate RMSE and correlation
rmse = mean_squared_error(y_test, y_pred, squared=False)
correlation, _ = pearsonr(y_test, y_pred)
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'Pearson Correlation: {correlation}')


# Plot training and validation loss over epochs
plt.figure(figsize=(10, 6))
plt.plot(range(len(train_losses)), train_losses, label='Training Loss')
plt.plot(range(len(val_losses)), val_losses, label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss over Epochs')
plt.legend()
plt.show()
